package com.thinkgem.jeesite.modules.cms.web.front;




import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.constants.Constants;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.security.MD5Util;
import com.thinkgem.jeesite.common.utils.FileUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.cms.entity.Site;
import com.thinkgem.jeesite.modules.cms.service.SiteService;
import com.thinkgem.jeesite.modules.cms.utils.CmsUtils;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
import com.thinkgem.jeesite.modules.witcm.business.entity.Business;
import com.thinkgem.jeesite.modules.witcm.business.entity.BusinessTypes;
import com.thinkgem.jeesite.modules.witcm.business.entity.Goods;
import com.thinkgem.jeesite.modules.witcm.business.entity.GoodsTypes;
import com.thinkgem.jeesite.modules.witcm.business.entity.Orders;
import com.thinkgem.jeesite.modules.witcm.business.entity.OrdersRecord;
import com.thinkgem.jeesite.modules.witcm.business.entity.Promotion;
import com.thinkgem.jeesite.modules.witcm.business.service.BusinessService;
import com.thinkgem.jeesite.modules.witcm.business.service.BusinessTypesService;
import com.thinkgem.jeesite.modules.witcm.business.service.GoodsService;
import com.thinkgem.jeesite.modules.witcm.business.service.GoodsTypesService;
import com.thinkgem.jeesite.modules.witcm.business.service.OrdersRecordService;
import com.thinkgem.jeesite.modules.witcm.business.service.OrdersService;
import com.thinkgem.jeesite.modules.witcm.business.service.PromotionService;
import com.thinkgem.jeesite.modules.witcm.resident.entity.Resident;
import com.thinkgem.jeesite.modules.witcm.resident.service.BusinessSorted;

/**
 * 商户中心Controller
 * @author luoyang
 * @version 2017-12-10
 */
@Controller
@RequestMapping(value = "${frontPath}/bus")
public class FrontBusController extends BaseController{
	@Autowired
	private SiteService siteService;
	@Autowired
	private OrdersService ordersService;
	@Autowired
	private GoodsService goodsService;
	@Autowired
	private BusinessService businessService;
	@Autowired
	private PromotionService promotionService;
	@Autowired
	private GoodsTypesService goodsTypesService;
	@Autowired
	private BusinessTypesService businessTypesService;
	@Autowired
	private OrdersRecordService ordersRecordService;
	
	/**
	 * 登录页面
	 */
	@RequestMapping(value = "login")
	public String loginPage(Model model) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site);
		return "modules/cms/front/themes/"+site.getTheme()+"/login";
	}
	
	/**
	 * 登录
	 */
	@ResponseBody
	@RequestMapping(value = "loginAjax.do")
	public Map<String,Object> login(String userName,String password,String validateCode) {
		Map<String,Object> map = new HashMap<String, Object>();
		if(StringUtils.isEmpty(userName)){
			map.put("result", false);
			map.put("msg", "请输入手机号");
			return map;
		}
		if(StringUtils.isEmpty(password)){
			map.put("result", false);
			map.put("msg", "请输入密码");
			return map;
		}
		if(StringUtils.isEmpty(validateCode)){
			map.put("result", false);
			map.put("msg", "请输入验证码");
			return map;
		}
		//验证码
		String code = (String) UserUtils.getSession().getAttribute("validateCode");
		if(!validateCode.toUpperCase().equals(code)){
			map.put("result", false);
			map.put("msg", "验证码错误，请重新输入");
			return map;
		}
		
		password = MD5Util.getMD5(password);
		Business business = businessService.findByTelAndPswd(userName, password);
		if(business==null){
			map.put("result", false);
			map.put("msg", "手机号或密码错误，请重新输入");
			return map;
		}
		business.setLoginPswd("");
		UserUtils.getSession().setAttribute(Constants.BUS_USER_KEY, business);
		map.put("result", true);
		return map;
	}
	
	/**
	 * 退出
	 */
	@RequestMapping(value = "exits")
	public String exits(Model model) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site);
		UserUtils.getSession().removeAttribute(Constants.BUS_USER_KEY);
		UserUtils.getSession().removeAttribute(Constants.RES_USER_KEY);
		return "modules/cms/front/themes/"+site.getTheme()+"/login";
	}
	
	/**
	 * 商户信息 form
	 */
	@RequestMapping(value = "busInfo")
	public String busInfo(Model model) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site);
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		model.addAttribute("business", business);
		return "modules/cms/front/themes/"+site.getTheme()+"/busInfo";
	}
	
	/**
	 * 商户信息 save
	 */
	@RequestMapping(value = "busInfoSave")
	public String busInfoSave(MultipartFile file,HttpServletRequest request,Business business, Model model, RedirectAttributes redirectAttributes) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site);
		//判断是否登录
		Business bus = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		if(!file.isEmpty()){
			try {
				String parenturl=request.getContextPath();
				String url=Global.getUserfilesBaseDir() + Global.USERFILES_BASE_URL+ "business";
			    File file2=new File(url);
			    if(!file2.exists()){
			    	file2.mkdir();
			    }
			    String fileUrl=parenturl+Global.USERFILES_BASE_URL+ "business";
			    String fileName=file.getOriginalFilename();
			    String[] after= fileName.split("\\.");
			    SimpleDateFormat format=new SimpleDateFormat("YYYYMMddHHmmss");
			    String dateString=format.format(new Date());
			    String newFileName=url+"/"+dateString+"."+after[1];
			    String filePath=fileUrl+"/"+dateString+"."+after[1];
			    File newFile=new File(newFileName);
				InputStream inputStream=file.getInputStream();
				file.transferTo(newFile);
				business.setLogoId(filePath);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		businessService.updateFront(business);
		bus = businessService.get(business.getId());
		UserUtils.getSession().removeAttribute(Constants.BUS_USER_KEY);
		UserUtils.getSession().setAttribute(Constants.BUS_USER_KEY, bus);
		addMessage(redirectAttributes, "保存成功");
		return "redirect:"+Global.getFrontPath()+"/bus/busInfo/?repage";
	}
	
	/**
	 * 星级查询
	 */
	@RequestMapping(value = "busStars")
	public String busStars(Model model) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site);
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		BusinessSorted.getSortedNum(business);
		model.addAttribute("sortedNum", business.getSortedNum());
		return "modules/cms/front/themes/"+site.getTheme()+"/busStars";
	}
	
	/**
	 * 商品管理 list
	 */
	@RequestMapping(value = "busGoods")
	public String busGoodsList(Goods goods, HttpServletRequest request, HttpServletResponse response, Model model) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site);
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		if(goods==null){
			goods = new Goods();
		}
		
		goods.setBusiness(business);
		Page<Goods> page = goodsService.findPage(new Page<Goods>(request, response), goods); 
		model.addAttribute("page", page);
		return "modules/cms/front/themes/"+site.getTheme()+"/busGoodsList";
	}
	
	/**
	 * 商品管理 form
	 */
	@RequestMapping(value = "busGoodsForm")
	public String busGoodsForm(@RequestParam(required=false) String id,Model model) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site);
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		Goods entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = goodsService.get(id);
		}
		if (entity == null){
			entity = new Goods();
		}
		model.addAttribute("goods", entity);
		return "modules/cms/front/themes/"+site.getTheme()+"/busGoodsForm";
	}
	
	/**
	 * 商品管理 save
	 */
	@RequestMapping(value = "busGoodsSave")
	public String busGoodsSave(MultipartFile file,HttpServletRequest request,Goods goods, Model model, RedirectAttributes redirectAttributes) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site); 
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		if (!beanValidator(model, goods)){
			return busPromotionForm(goods.getId(), model);
		}
		if(!file.isEmpty()){
			try {
				String parenturl=request.getContextPath();
				String url=Global.getUserfilesBaseDir() + Global.USERFILES_BASE_URL+ "business";
			    File file2=new File(url);
			    if(!file2.exists()){
			    	file2.mkdir();
			    }
			    String fileUrl=parenturl+Global.USERFILES_BASE_URL+ "business";
			    String fileName=file.getOriginalFilename();
			    String[] after=fileName.split("\\.");
			    SimpleDateFormat format=new SimpleDateFormat("YYYYMMddHHmmss");
			    String dateString=format.format(new Date());
			    String newFileName=url+"/"+dateString+"."+after[1];
			    String filePath=fileUrl+"/"+dateString+"."+after[1];
			    File newFile=new File(newFileName);
				InputStream inputStream=file.getInputStream();
				file.transferTo(newFile);
				goods.setImagesId(filePath);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		goods.setBusiness(business);
		goods.setCreateBy(new User("1"));
		goods.setUpdateBy(new User("1"));
		goods.setCreateDate(new Date());
		goods.setUpdateDate(new Date());
		goodsService.save(goods);
		addMessage(redirectAttributes, "保存成功");
		return "redirect:"+Global.getFrontPath()+"/bus/busGoods/?repage";
	}
	
	/**
	 * 商品管理 delete
	 */
	@RequestMapping(value = "busGoodsdel")
	public String busGoodsdel(Goods goods, RedirectAttributes redirectAttributes) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		goodsService.delete(goods);
		addMessage(redirectAttributes, "删除成功");
		return "redirect:"+Global.getFrontPath()+"/bus/busGoods/?repage";
	}
	
	/**
	 * 订单管理 list
	 */
	@RequestMapping(value = "busOrder")
	public String busOrderList(Orders orders, HttpServletRequest request, HttpServletResponse response, Model model) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site);
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		orders.setBusinessId(business.getId());
		Page<Orders> page = ordersService.findPage(new Page<Orders>(request, response), orders); 
		model.addAttribute("page", page);
		return "modules/cms/front/themes/"+site.getTheme()+"/busOrderList";
	}
	
	/**
	 * 订单管理－Form
	 */
	@RequestMapping(value = "busOrderForm")
	public String busOrderForm(@RequestParam(required = false) String id, Model model) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site);
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		
		Orders orders = new Orders();
		List<OrdersRecord> list = new ArrayList<OrdersRecord>();
		if (StringUtils.isNotBlank(id)){
			orders = ordersService.get(id);
		}
		if(orders!=null && StringUtils.isNotEmpty(orders.getId())){
			OrdersRecord record = new OrdersRecord();
			record.setOrders(orders);
			list = ordersRecordService.findList(record);
		}
		
		model.addAttribute("orders", orders);
		model.addAttribute("list", list);
		return "modules/cms/front/themes/"+site.getTheme()+"/busOrderForm";
	}
	
	/**
	 * 订单管理－update
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "busOrderUpd.do")
	public Map<String,Object> busOrderUpd(String oid,String status,String remarks){
		Map<String,Object> map = new HashMap<String, Object>();
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			map.put("result", false);
			map.put("msg", "响应超时或用户已失效，请重新登录");
			return map;
		}
		Orders o = ordersService.get(oid);
		if(o==null){
			map.put("result", false);
			map.put("msg", "该订单不存在或已删除，不能操作，请刷新页面");
			return map;
		}
		if(Constants.ORDER_STATUS_3.equals(o.getStatus())){
			map.put("result", false);
			map.put("msg", "该订单已完成，不能操作，请刷新页面");
			return map;
		}
		if(Constants.ORDER_STATUS_4.equals(o.getStatus())){
			map.put("result", false);
			map.put("msg", "该订单已取消，不能操作，请刷新页面");
			return map;
		}
		
		Orders orders = new Orders(oid);
		orders.setStatus(status);
		orders.setUpdateDate(new Date());
		try {
			ordersService.updateFront(orders, business.getFullName(), remarks);
		} catch (Exception e) {
			map.put("result", false);
			map.put("msg", "保存失败，请稍候在试……");
			e.printStackTrace();
			return map;
		}
		map.put("result", true);
		return map;
	}
	
	/**
	 * 促销管理 list
	 */
	@RequestMapping(value = "busPromotion")
	public String busPromotion(Promotion promotion, HttpServletRequest request, HttpServletResponse response, Model model) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site);
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		if(promotion==null){
			promotion = new Promotion();
		}
		promotion.setBusiness(business);
		Page<Promotion> page = promotionService.findPage(new Page<Promotion>(request, response), promotion);
		model.addAttribute("page", page);
		return "modules/cms/front/themes/"+site.getTheme()+"/busPromotionList";
	}
	
	/**
	 * 促销管理 form
	 */
	@RequestMapping(value = "busPromotionForm")
	public String busPromotionForm(@RequestParam(required=false) String id,Model model) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site); 
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		Promotion entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = promotionService.get(id);
		}
		if (entity == null){
			entity = new Promotion();
		}
		model.addAttribute("promotion", entity);
		return "modules/cms/front/themes/"+site.getTheme()+"/busPromotionForm";
	}
	
	/**
	 * 促销管理 save
	 */
	@RequestMapping(value = "busPromotionSave")
	public String busPromotionSave(Promotion promotion, Model model, RedirectAttributes redirectAttributes) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site); 
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		if (!beanValidator(model, promotion)){
			return busPromotionForm(promotion.getId(), model);
		}
		promotion.setBusiness(business);
		promotion.setCreateBy(new User("1"));
		promotion.setUpdateBy(new User("1"));
		promotion.setCreateDate(new Date());
		promotion.setUpdateDate(new Date());
		promotionService.save(promotion);
		addMessage(redirectAttributes, "保存成功");
		return "redirect:"+Global.getFrontPath()+"/bus/busPromotion/?repage";
	}
	
	/**
	 * 促销管理 delete
	 */
	@RequestMapping(value = "busPromotionDel")
	public String busPromotionDel(Promotion promotion, RedirectAttributes redirectAttributes) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		promotionService.delete(promotion);
		addMessage(redirectAttributes, "删除成功");
		return "redirect:"+Global.getFrontPath()+"/bus/busPromotion/?repage";
	}
	
	
	/**
	 * 密码修改－form
	 */
	@RequestMapping(value = "busPswd")
	public String busPswdForm(Model model) {
		Site site = CmsUtils.getSite(Site.defaultSiteId());
		model.addAttribute("site", site);
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			return "modules/cms/front/themes/"+site.getTheme()+"/login";
		}
		return "modules/cms/front/themes/"+site.getTheme()+"/busPswdForm";
	}
	
	/**
	 * 密码修改－update
	 */
	@ResponseBody
	@RequestMapping(value = "busPswdUpd.do")
	public Map<String,Object> busPswdUpd(String oldpswd,String newpswd) {
		Map<String,Object> map = new HashMap<String, Object>();
		//判断是否登录
		Business business = (Business) UserUtils.getSession().getAttribute(Constants.BUS_USER_KEY);
		if(business==null || StringUtils.isEmpty(business.getId())){
			map.put("result", false);
			map.put("msg", "响应超时或用户已失效，请重新登录");
			return map;
		}
		business = businessService.get(business.getId());
		if(!MD5Util.getMD5(oldpswd).equals(business.getLoginPswd())){
			map.put("result", false);
			map.put("msg", "旧密码不正确，请重新输入");
			return map;
		}
		
		businessService.updatePswd(MD5Util.getMD5(newpswd), business.getId());
		
		map.put("result", true);
		return map;
	}
	
	/**
	 * 商户类别选择
	 * @param extId
	 * @param response
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "busTreeData")
	public List<Map<String, Object>> busTreeData(@RequestParam(required=false) String extId, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<BusinessTypes> list = businessTypesService.findAllList(new BusinessTypes());
		for (int i=0; i<list.size(); i++){
			BusinessTypes e = list.get(i);
			if (StringUtils.isBlank(extId) || (extId!=null && !extId.equals(e.getId()))){
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.getId());
				map.put("pId", e.getParent()!=null ? e.getParent().getId() : "");
				map.put("name", e.getName());
				mapList.add(map);
			}
		}
		
		return mapList;
	}
	
	/**
	 * 商品类别选择
	 * @param extId
	 * @param response
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "goodsTreeData")
	public List<Map<String, Object>> goodsTreeData(@RequestParam(required=false) String extId, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<GoodsTypes> list = goodsTypesService.findAllList(new GoodsTypes());
		for (int i=0; i<list.size(); i++){
			GoodsTypes e = list.get(i);
			if (StringUtils.isBlank(extId) || (extId!=null && !extId.equals(e.getId()))){
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.getId());
				map.put("pId", e.getParent()!=null ? e.getParent().getId() : "");
				map.put("name", e.getName());
				mapList.add(map);
			}
		}
		
		return mapList;
	}
	
	/**
	 * 树结构选择标签（treeselect.tag）
	 */
	@RequestMapping(value = "treeselect")
	public String treeselect(HttpServletRequest request, Model model) {
		model.addAttribute("url", request.getParameter("url")); 	// 树结构数据URL
		model.addAttribute("extId", request.getParameter("extId")); // 排除的编号ID
		model.addAttribute("checked", request.getParameter("checked")); // 是否可复选
		model.addAttribute("selectIds", request.getParameter("selectIds")); // 指定默认选中的ID
		model.addAttribute("isAll", request.getParameter("isAll")); 	// 是否读取全部数据，不进行权限过滤
		model.addAttribute("module", request.getParameter("module"));	// 过滤栏目模型（仅针对CMS的Category树）
		return "modules/cms/front/themes/witcm/tagTreeselect";
	}
}
