/**
O * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.thinkgem.jeesite.modules.witcm.resident.web;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.thinkgem.jeesite.common.beanvalidator.BeanValidators;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.constants.Constants;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.security.MD5Util;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.utils.excel.ExportExcel;
import com.thinkgem.jeesite.common.utils.excel.ImportExcel;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.sys.entity.Office;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.service.OfficeService;
import com.thinkgem.jeesite.modules.sys.service.SystemService;
import com.thinkgem.jeesite.modules.sys.utils.DictUtils;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
import com.thinkgem.jeesite.modules.witcm.resident.entity.Resident;
import com.thinkgem.jeesite.modules.witcm.resident.front.dao.FresidentDao;
import com.thinkgem.jeesite.modules.witcm.resident.front.entity.Fresident;
import com.thinkgem.jeesite.modules.witcm.resident.service.ResidentService;

/**
 * 居民Controller
 * 
 * @author liyongfang
 * @version 2017-12-04
 */
@Controller
@RequestMapping(value = "${adminPath}/resident/resident")
public class ResidentController extends BaseController {

	@Autowired
	private ResidentService residentService;
	@Autowired
	private OfficeService officeService;

	@ModelAttribute
	public Resident get(@RequestParam(required = false) String id) {
		Resident entity = null;
		if (StringUtils.isNotBlank(id)) {
			entity = residentService.get(id);
		}
		if (entity == null) {
			entity = new Resident();
		}
		return entity;
	}

	/**
	 * 改变登录状态
	 * 
	 * @param resident
	 * @param cgId
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequiresPermissions("resident:resident:edit")
	@RequestMapping(value = { "resolveLoginFlag" })
	public String resolveLoginFlag(Resident resident, String cgId,
			HttpServletRequest request, HttpServletResponse response,
			Model model) {
		Resident residentcg = residentService.get(cgId);
		if (residentcg.getLoginFlag().equals("0")) {
			residentcg.setLoginFlag(Constants.LOGIN_FLAG_DENY);
		} else {
			residentcg.setLoginFlag(Constants.LOGIN_FLAG_NORMAL);
		}
		residentService.save(residentcg);
		addMessage(model, "操作成功");
		return list(resident, request, response, model);
	}

	@RequiresPermissions("resident:resident:view")
	@RequestMapping(value = { "list", "" })
	public String list(Resident resident, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		
		if (null != resident.getBelongOrg()
				&& StringUtils.isNotEmpty(resident.getBelongOrg().getName())) {
			String officeName = resident.getBelongOrg().getName();
			try {
				officeName = URLDecoder.decode(officeName, "utf-8");
				resident.getBelongOrg().setName(officeName);
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		// 乱码解决
		if (StringUtils.isNoneEmpty(resident.getLikeName())) {
			try {
				resident.setLikeName(URLDecoder.decode(resident.getLikeName(),
						"utf-8"));
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		// 设置数据权限，管理员只能看到本社区的数据
		residentService.setScope(resident);
		Page<Resident> page = residentService.findPage(new Page<Resident>(
				request, response), resident);
		// 避免前台做判断
		for (Resident r : page.getList()) {
			r.setLoginFlagResolveUrl(Constants.LOGINFLAG_RESOLVE_URL + "?cgId="
					+ r.getId());
			if (r.getLoginFlag().equals(Constants.LOGIN_FLAG_DENY)) {
				r.setLoginText(DictUtils.getDictLabel(
						Constants.LOGIN_FLAG_NORMAL, "login_flag", ""));
			} else {
				r.setLoginText(DictUtils.getDictLabel(
						Constants.LOGIN_FLAG_DENY, "login_flag", ""));
			}
		}
		model.addAttribute("page", page);
		return "witcm/resident/residentList";
	}

	@RequiresPermissions("resident:resident:view")
	@RequestMapping(value = "form")
	public String form(Resident resident,HttpServletRequest request, Model model) {
		String password=request.getParameter("pass");
		if(null!=password){
			model.addAttribute("resident", resident);
			return "witcm/resident/modifyPass";
		}
		// 假如当前用户为社区管理员，那么添加的社区为当前用户的默认社区
		if (null != UserUtils.getUser().getOffice()) {
			Office office = officeService.get(UserUtils.getUser().getOffice()
					.getId());
			// 这里是对象的比较，不能用==来比较
			// System.err.println(Constants.COMMUNITY_FLAG==office.getType());
			if (Constants.COMMUNITY_FLAG.equals(office.getType())) {
				resident.setBelongOrg(office);
			}
		}
		model.addAttribute("resident", resident);
		return "witcm/resident/residentForm";
	}

	@RequiresPermissions("resident:resident:edit")
	@RequestMapping(value = "save")
	public String save(Resident resident, Model model,HttpServletRequest request,
			RedirectAttributes redirectAttributes) {
		String passwordFlag=request.getParameter("pass");
		String oldPass=request.getParameter("oldpass");
		if(null!=passwordFlag){
			if(StringUtils.isEmpty(resident.getLoginPswd())){
				resident.setLoginPswd(oldPass);
				residentService.save(resident);
				return "redirect:" + Global.getAdminPath()
						+ "/resident/resident/?repage";
			}
			if (!beanValidator(model, resident)) {
				return form(resident,request, model);
			}
			// 校验密码是否相等
			if (StringUtils.isEmpty(resident.getId())&&!resident.getReloginPswd().equals(resident.getLoginPswd())) {
				addMessage(model, "两次密码不相同");
				return form(resident,request, model);
			}
			String password = resident.getLoginPswd();
			resident.setLoginPswd(MD5Util.getMD5(password));
			residentService.save(resident);
			addMessage(redirectAttributes, "保存居民成功");
			return "redirect:" + Global.getAdminPath()
					+ "/resident/resident/?repage";
		}
		// 防止电话号码为空字符串的时候依然正则匹配，这里可以通过validate的自定义校验实现
		if (StringUtils.isEmpty(resident.getPhone())) {
			resident.setPhone(null);
		}
		// 设置默认审核状态为审核，可登录
		if (StringUtils.isEmpty(resident.getLoginFlag())) {
			resident.setLoginFlag(Constants.LOGIN_FLAG_DENY);
		}
		if (StringUtils.isEmpty(resident.getAduitStatus())) {
			resident.setAduitStatus(Constants.ADUIT_STATUS_YES);
		}
		if (!beanValidator(model, resident)) {
			return form(resident,request, model);
		}

		// 校验密码是否相等
		if (StringUtils.isEmpty(resident.getId())&&!resident.getReloginPswd().equals(resident.getLoginPswd())) {
			addMessage(model, "两次密码不相同");
			return form(resident,request, model);
		}
		// 密码md5加密
		if (StringUtils.isEmpty(resident.getId())) {
			String password = resident.getLoginPswd();
			resident.setLoginPswd(MD5Util.getMD5(password));
		}
		residentService.save(resident);
		addMessage(redirectAttributes, "保存居民成功");
		return "redirect:" + Global.getAdminPath()
				+ "/resident/resident/?repage";
	}

	@RequiresPermissions("resident:resident:edit")
	@RequestMapping(value = "delete")
	public String delete(Resident resident,
			RedirectAttributes redirectAttributes) {
		residentService.delete(resident);
		addMessage(redirectAttributes, "删除居民成功");
		return "redirect:" + Global.getAdminPath()
				+ "/resident/resident/?repage";
	}

	/**
	 * 导出用户数据
	 * 
	 * @param user
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("resident:resident:edit")
	@RequestMapping(value = "export", method = RequestMethod.POST)
	public String exportFile(Resident resident, HttpServletRequest request,
			HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String fileName = "居民数据" + DateUtils.getDate("yyyyMMddHHmmss")
					+ ".xlsx";
			Page<Resident> page = residentService.findPage(new Page<Resident>(
					request, response, -1), resident);
			new ExportExcel("居民数据", Resident.class).setDataList(page.getList())
					.write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出用户失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/resident/resident/list?repage";
	}

	/**
	 * 导入居民数据
	 * 
	 * @param file
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("resident:resident:edit")
	@RequestMapping(value = "import", method = RequestMethod.POST)
	public String importFile(MultipartFile file,
			RedirectAttributes redirectAttributes) {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + adminPath + "/resident/resident/list?repage";
		}
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<Resident> list = ei.getDataList(Resident.class);
			for (Resident resident : list) {
				try {
					if ("true".equals(checkTelPhone("", resident.getTelphone()))) {
						// 设置默认为待审核，不可登录
						resident.setAduitStatus(Constants.ADUIT_STATUS_PRE);
						resident.setLoginFlag(Constants.LOGIN_FLAG_DENY);
						resident.setLoginPswd(MD5Util
								.getMD5(Constants.DEFAULT_RESIDENT_PAW));
						if (StringUtils.isEmpty(resident.getPhone())) {
							resident.setPhone(null);
						}
						BeanValidators.validateWithException(validator,
								resident);
						residentService.save(resident);
						successNum++;
					} 
					else{
						failureMsg.append("<br/>手机号" + resident.getTelphone()
								+ " 已存在; ");
						failureNum++;
					}
				} catch (ConstraintViolationException ex) {
					failureMsg.append("<br/>登录名 " + resident.getName()
							+ " 导入失败：");
					List<String> messageList = BeanValidators
							.extractPropertyAndMessageAsList(ex, ": ");
					for (String message : messageList) {
						failureMsg.append(message + ";");
						failureNum++;
					}
				} catch (Exception ex) {
					failureMsg.append("<br/>登录名 " + resident.getName()
							+ " 导入失败：" + ex.getMessage());
				}
			}
			if (failureNum > 0) {
				failureMsg.insert(0, "，失败 " + failureNum + " 条用户，导入信息如下：");
			}
			addMessage(redirectAttributes, "已成功导入 " + successNum + " 条用户"
					+ failureMsg);
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入用户失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/resident/resident/list?repage";
	}

	/**
	 * 下载导入居民数据模板
	 * 
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("resident:resident:view")
	@RequestMapping(value = "import/template")
	public String importFileTemplate(HttpServletResponse response,
			RedirectAttributes redirectAttributes) {
		try {
			String fileName = "居民数据导入模板.xlsx";
			List<Resident> list = Lists.newArrayList();
			list.add(new Resident());
			new ExportExcel("居民数据", Resident.class, 2).setDataList(list)
					.write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入模板下载失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/resident/resident/list?repage";
	}

	/**
	 * 判断用户是否有重复
	 * 
	 * @param username
	 * @return
	 */
	@ResponseBody
	@RequiresPermissions("resident:resident:view")
	@RequestMapping(value = "checkName")
	public String checkLoginName(String oldName, String name) {
		if (name != null && name.equals(oldName)) {
			return "true";
		} else if (name != null) {
			Resident resident = new Resident();
			resident.setName(name);
			residentService.setScope(resident);
			if (StringUtils.isNotEmpty(name)) {
				List<Resident> residents = residentService.findList(resident);
				if (residents.size() > 0) {
					return "false";
				} else {
					return "true";
				}
			}
		}
		return "true";

	}
	/**
	 * 判断用户是否有重复
	 * 
	 * @param username
	 * @return
	 */
	@ResponseBody
	@RequiresPermissions("resident:resident:view")
	@RequestMapping(value = "checkTelPhone")
	public String checkTelPhone(String oldPhone, String telphone) {
		if (oldPhone != null && telphone.equals(oldPhone)) {
			return "true";
		} else if (telphone != null) {
			Resident resident = new Resident();
			resident.setEqPhone(telphone);
			residentService.findList(resident);
			if (StringUtils.isNotEmpty(telphone)) {
				List<Resident> residents = residentService.findList(resident);
				if (residents.size() > 0) {
					return "false";
				} else {
					return "true";
				}
			}
		}
		return "true";

	}
	@RequiresPermissions("user")
	@ResponseBody
	@RequestMapping(value = "treeData")
	public List<Map<String, Object>> treeData(
			@RequestParam(required = false) String officeId,
			HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<Resident> list = residentService.findByOfficeId(officeId);
		for (int i = 0; i < list.size(); i++) {
			Resident e = list.get(i);
			Map<String, Object> map = Maps.newHashMap();
			map.put("id", "u_" + e.getId());
			map.put("pId", officeId);
			map.put("name", StringUtils.replace(e.getName(), " ", ""));
			mapList.add(map);
		}
		return mapList;
	}
	
	
}