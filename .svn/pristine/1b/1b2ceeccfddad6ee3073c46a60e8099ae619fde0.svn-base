package com.thinkgem.jeesite.modules.cms.web.front;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.constants.Constants;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.cms.entity.Article;
import com.thinkgem.jeesite.modules.cms.entity.Category;
import com.thinkgem.jeesite.modules.cms.entity.Site;
import com.thinkgem.jeesite.modules.cms.service.ArticleDataService;
import com.thinkgem.jeesite.modules.cms.service.ArticleService;
import com.thinkgem.jeesite.modules.cms.service.CategoryService;
import com.thinkgem.jeesite.modules.cms.service.SiteService;
import com.thinkgem.jeesite.modules.cms.utils.CmsUtils;
import com.thinkgem.jeesite.modules.witcm.business.entity.Business;
import com.thinkgem.jeesite.modules.witcm.business.entity.BusinessTypes;
import com.thinkgem.jeesite.modules.witcm.business.entity.Promotion;
import com.thinkgem.jeesite.modules.witcm.business.service.BusinessService;
import com.thinkgem.jeesite.modules.witcm.business.service.BusinessTypesService;
import com.thinkgem.jeesite.modules.witcm.business.service.GoodsService;
import com.thinkgem.jeesite.modules.witcm.business.service.GoodsTypesService;
import com.thinkgem.jeesite.modules.witcm.business.service.OrdersRecordService;
import com.thinkgem.jeesite.modules.witcm.business.service.OrdersService;
import com.thinkgem.jeesite.modules.witcm.business.service.PromotionService;
import com.thinkgem.jeesite.modules.witcm.resident.entity.Comments;
import com.thinkgem.jeesite.modules.witcm.resident.service.CommentsService;
import com.thinkgem.jeesite.modules.witcm.si.codeimage.service.CodeImageService;

/**
 * 商户中心Controller
 * 
 * @author luoyang
 * @version 2017-12-10
 */
@Controller
@RequestMapping(value = "${frontPath}/mobile")
public class FrontMobileController extends BaseController {
	@Autowired
	private SiteService siteService;
	@Autowired
	private OrdersService ordersService;
	@Autowired
	private GoodsService goodsService;
	@Autowired
	private BusinessService businessService;
	@Autowired
	private PromotionService promotionService;
	@Autowired
	private GoodsTypesService goodsTypesService;
	@Autowired
	private BusinessTypesService businessTypesService;
	@Autowired
	private OrdersRecordService ordersRecordService;
	@Autowired
	private CodeImageService codeImageService;
	@Autowired
	private CategoryService categoryService;
	@Autowired
	private ArticleService articleService;
	@Autowired
	private ArticleDataService articleDataService;
	@Autowired
	private CommentsService commentsService;

	/**
	 * 登录页面
	 */
	@RequestMapping(value = "")
	public String index(Model model) {
		// 促销信息取最新十条
		Page<Promotion> page = new Page<Promotion>(1, 10);
		page = promotionService.findPage(page, new Promotion());
		// 取内容分类
		Site site = siteService.get(Site.defaultSiteId());
		List<Category> categories = CmsUtils.getMainNavList(site.getId());
		Category category = new Category();
		category.setName("便民服务");
		List<Category> cateList = categoryService.findList(category);
		if (cateList.size() > 0) {
			categories.remove(cateList.get(0));
		}
		category.setName("社区新闻");
		List<Category> cateLists = categoryService.findList(category);
		if (cateLists.size() > 0) {
			Category lastCategory = cateLists.get(0);
			// 文章
			Page<Article> aPage = new Page<Article>(1, 10);
			Article a = new Article();
			a.setCategory(lastCategory);
			aPage = articleService.findPage(aPage, a);
			model.addAttribute("apage", aPage);
			model.addAttribute("last", lastCategory);
		}
		model.addAttribute("ppage", page);
		model.addAttribute("cList", categories);
		return "modules/cms/front/themes/mobile/index";
	}

	/**
	 * 发现页面
	 */
	@RequestMapping(value = "/discover")
	public String discover(Model model) {
		Category category = new Category();
		category.setName("便民服务");
		List<Category> cateList = categoryService.findList(category);
		if (cateList.size() > 0) {
			Category category2 = new Category();
			category2.setParent(cateList.get(0));
			List<Category> categories = categoryService.findList(category2);
			model.addAttribute("categoryList", categories);
		}
		Page<Business> bPage = new Page<Business>(1, 10);
		bPage.setOrderBy("star desc");
		bPage = businessService.findPage(bPage, new Business());
		model.addAttribute("bpage", bPage);
		return "modules/cms/front/themes/mobile/discover";
	}

	/**
	 * 发现页面
	 */
	@RequestMapping(value = "/categoryIndex")
	public String categoryIndex(String id, Model model) {
		Category category = categoryService.get(id);
		model.addAttribute("category", category);
		Category category2 = new Category();
		category2.setParent(category);
		List<Category> categories = categoryService.findList(category2);
		model.addAttribute("categoryList", categories);
		model.addAttribute("curId", categories.get(0).getId());

		category2.setParent(categories.get(0));
		List<Category> categories1 = categoryService.findList(category2);
		if (categories1.size() <= 0) {
			return "modules/cms/front/themes/mobile/newsList";
		} else {
			model.addAttribute("categoryListc", categories1);
			model.addAttribute("cone", categories1.get(0));

			// 红色旅游
			if (category.getShowModes().equals(Constants.VIDEO_ENMU)) {

				return "modules/cms/front/themes/mobile/tour";
			} else {

				return "modules/cms/front/themes/mobile/articleList";
			}
		}

	}

	/**
	 * 发现页面
	 */
	@RequestMapping(value = "/categoryToggle")
	public String categoryToggle(String id, Model model) {
		Category category = categoryService.get(id);
		Category parent = categoryService.get(category.getParent().getId());
		model.addAttribute("category", parent);

		Category category2 = new Category();
		category2.setParent(parent);
		List<Category> categories = categoryService.findList(category2);
		model.addAttribute("categoryList", categories);
		model.addAttribute("curId", category.getId());
		model.addAttribute("index", categories.indexOf(category));

		category2.setParent(category);
		List<Category> categories1 = categoryService.findList(category2);
		if (categories1.size() <= 0) {
			return "modules/cms/front/themes/mobile/newsList";
		} else {
			model.addAttribute("categoryListc", categories1);
			model.addAttribute("cone", categories1.get(0));
			// 红色旅游
			if (parent.getShowModes().equals(Constants.VIDEO_ENMU)) {

				return "modules/cms/front/themes/mobile/tour";
			} else {
				return "modules/cms/front/themes/mobile/articleList";
			}
		}
	}

	@RequestMapping(value = "/articleView")
	public String articleView(String id, Model model,
			@RequestParam(required = false, defaultValue = "1") Integer pageNo,
			@RequestParam(required = false, defaultValue = "4") Integer pageSize) {
		articleService.updateHitsAddOne(id);
		Article article = articleService.get(id);
		article.setArticleData(articleDataService.get(id));
		Comments commentss = new Comments();
		commentss.setArticle(article);
		List<Comments> commentsList = commentsService.findList(commentss);
		article.setComments(commentsList.size());
		Category category = categoryService.get(article.getCategory());
		model.addAttribute("category", category);
		model.addAttribute("article", article);
		if (category.getAllowComment().equals(Global.YES)) {
			Page<Comments> cPage = new Page<Comments>(pageNo, pageSize);
			Comments comments = new Comments();
			comments.setArticle(article);
			cPage = commentsService.findPage(cPage, comments);
			model.addAttribute("page", cPage);
			return "modules/cms/front/themes/mobile/articleDetailComment";
		}
		return "modules/cms/front/themes/mobile/articleDetail";
	}

	@ResponseBody
	@RequestMapping(value = "/categoryToggleJson.json", produces = MediaType.APPLICATION_JSON_VALUE)
	public Map categoryToggleJson(String id) {
		Map reMap = new HashMap<String, Object>();
		Category category = categoryService.get(id);
		if (null == category) {
			reMap.put("result", "fail");
		} else {
			reMap.put("result", "success");
			reMap.put("category", category);
			Category category2 = new Category();
			category2.setParent(category.getParent());
			List<Category> categories = categoryService.findList(category2);
			reMap.put("index", categories.indexOf(category));

			/*
			 * Article article = new Article(); article.setCategory(category);
			 * Page<Article> aPage = new Page<Article>(1,8); aPage =
			 * articleService.findPage(aPage, article); reMap.put("childList",
			 * aPage.getList());
			 */
		}
		return reMap;
	}

	@ResponseBody
	@RequestMapping(value = "/articleMoreJson.json", produces = MediaType.APPLICATION_JSON_VALUE)
	public Map articleMoreJson(Integer pageNo, Integer pageSize,
			String categoryId) {
		Map reMap = new HashMap<String, Object>();
		Category category = categoryService.get(categoryId);
		if (null == category) {
			reMap.put("result", "fail");
		} else {
			reMap.put("result", "success");
			reMap.put("category", category);
			Article article = new Article();
			article.setCategory(new Category(categoryId));
			Page<Article> aPage = new Page<Article>(pageNo, pageSize);
			aPage = articleService.findPage(aPage, article);
			for (Article a : aPage.getList()) {
				Comments commentss = new Comments();
				commentss.setArticle(a);
				List<Comments> commentsList = commentsService
						.findList(commentss);
				a.setComments(commentsList.size());
				a.setArticleData(articleDataService.get(a.getId()));
			}
			if (pageNo > aPage.getPageNo()) {
				reMap.put("list", new ArrayList<Article>());
			} else {
				reMap.put("list", aPage.getList());
			}
		}
		return reMap;
	}

	@ResponseBody
	@RequestMapping(value = "/businessList.json", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<Business> businessListJson(String typeId,
			@RequestParam(required = false, defaultValue = "1") Integer pageNo,
			@RequestParam(required = false, defaultValue = "8") Integer pageSize) {
		Business business = new Business();
		business.setTypes(new BusinessTypes(typeId));
		Page<Business> page = new Page<Business>(pageNo, pageSize);
		page = businessService.findPage(page, business);
		return page.getList();
	}

	@RequestMapping(value = "/businessList")
	public String businessList(
			@RequestParam(required = false, defaultValue = "1") Integer pageNo,
			@RequestParam(required = false, defaultValue = "8") Integer pageSize,
			Model model) {
		BusinessTypes businessTypes = new BusinessTypes();
		businessTypes.setParent(new BusinessTypes("1"));
		List<BusinessTypes> types = businessTypesService
				.findList(businessTypes);
		model.addAttribute("typeList", types);
		Business business = new Business();
		business.setTypes(types.get(0));
		model.addAttribute("current", types.get(0));
		Page<Business> page = new Page<Business>(pageNo, pageSize);
		page = businessService.findPage(page, business);
		model.addAttribute("page", page);
		return "modules/cms/front/themes/mobile/businessList";
	}

	@RequestMapping(value = "/businessDetail")
	public String businessDetail(
			@RequestParam(required = false, defaultValue = "1") Integer pageNo,
			@RequestParam(required = false, defaultValue = "8") Integer pageSize,
			Model model) {
		Page<Business> page = new Page<Business>(pageNo, pageSize);
		page = businessService.findPage(page, new Business());
		model.addAttribute("page", page);
		return "modules/cms/front/themes/mobile/businessDetail";
	}
}
